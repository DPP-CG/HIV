;; generarte results related to population information
to generate-PLWH [year]
  
;  let MSM-pop count people with [infected? = true and sex = 3 and dead = 0]
;  let HET-pop count people with [infected? = true and sex <= 2 and dead = 0]
  
  ;total # by sex
  let i 0
  while [i < num-sex]
  [
    matrix:set numBySex (year) (tempRun * num-sex + i) (count item i total-people-sex)
    set i i + 1
  ]
 
  ;% of PLWH by sex
  if total-pop > 0
  [
    set i 0
    while [i < num-sex] 
    [
      matrix:set percBySex (year) (tempRun * num-sex + i) (count item i total-people-sex / total-pop)
      set i i + 1
    ]
  ]

  ;# of PLWH by care continuum
  set i 0
  while [i < num-stage]
  [
    matrix:set numByStage (year) (tempRun * num-stage + i) (count item i total-people-stage)
    set i i + 1
  ]

  ;% of PLWH by care continuum
  if total-pop > 0
  [
    set i 0
    while [i < num-stage]
    [
      matrix:set percByStage (year) (tempRun * num-stage + i) (count item i total-people-stage / total-pop)
      set i i + 1
    ]
  ]

  ;# of PLWH by age (13-24-34-44-55)
  set i 0
  while [i < num-age]
  [
    matrix:set numByAge (year) (tempRun * num-age + i) (count item i total-people-age)
    set i i + 1
  ]
  
  ;% of PLWH by age (13-24-34-44-55)
  if total-pop > 0
  [
    set i 0
    while [i < num-age]
    [
      matrix:set percByAge (year) (tempRun * num-age + i) (count item i total-people-age / total-pop)
      set i i + 1
    ]
  ]
  
  matrix:set totalPopulation (year) tempRun total-pop

  ;Total costs. Multipliying by time-unit to convert to annual cost assuming approximately same each year
;  matrix:set totalCost (year) tempRun sum[costs] of people with [infected? = true] * time-unit
;  matrix:set utilizationCost (year) tempRun sum[util-cost] of people with [infected? = true] * time-unit
;  matrix:set regimenCost (year) tempRun sum[regimen-cost-quarter] of people with [infected? = true] * time-unit
;  matrix:set OICost (year) tempRun sum[oi-cost-quarter] of people with [infected? = true] * time-unit
;  matrix:set careServiceCost (year) tempRun sum[care-service-cost] of people with [infected? = true] * time-unit
;  matrix:set testingCost (year) tempRun sum[test-cost] of people with [infected? = true] * time-unit

  ;Linked to care for all
;  let ub [3 6 12 24 1200]
;  set i 0
;  while [i < length ub]
;  [
;    matrix:set linkedToCare (year) (tempRun * (length ub) + i) (count people with [infected? = true and next-test > 0 and linked-to-care? = true and (quarter-linked-care - next-test) <= item i ub * time-unit / 12]) ;; within X months of diagnosis
;    set i i + 1
;    ]

  ;file-write "Linked to care for newly infected in all years"
  ;file-write count people with [infected? = true and index-patient? = false and linked-to-care? = true and dead = 0]
  ;file-write count people with [infected? = true and index-patient? = false and linked-to-care? = true and dead = 0 and stage = 3];; proportion every year who dropped out of care
  ;file-write count people with [infected? = true and index-patient? = false and linked-to-care? = true and dead = 1]
  ;file-write count people with [infected? = true and index-patient? = false and linked-to-care? = true and dead = 1 and in-care? = false];; individuals who dropped out of care -may or may not have entered back
  ;file-write count people with [infected? = true and index-patient? = false and linked-to-care? = true and quarter-ART-start > 0 and dead = 1]
  ;file-write count people with [infected? = true and index-patient? = false and linked-to-care? = true and quarter-ART-start > 0 and retention-in-ART = 1 and dead = 1]

  ;file-write "Sex acts"
  ;file-write numActsCasualMSM
  ;file-write numActsMainMSM
  ;file-write numActsConMSM
  ;file-write numActsMainHET
  ;file-write numActsConHET

  ;file-write "Number of acts table"
  ;set i  0
  ;while [i < 6]
  ;[
  ;  file-write item i numACTStable3 ;
  ;  set i i + 1
  ;  ]
  ;set i  0
  ;while [i < 6]
  ;[
  ;  file-write item i numTranstable3 ;
  ;  set i i + 1
  ;  ]
  ;

  ;file-print ""

  ;file-close

end

;; Generate results related to new infections
to generate-new-infections [year]

  let num-new-infections-this-year count newly-infected
  let num-new-death-this-year count newly-dead
;  let num-new-MSM-this-year count newly-infected with [sex = 3]
;  let num-new-HET-this-year count newly-infected with [sex <= 2] 
  
  matrix:set totalNewInfection (year) tempRun num-new-infections-this-year
  
  matrix:set totalNewDeath (year) tempRun num-new-death-this-year
  
  matrix:set totalNewDeathLife (year) tempRun count newly-dead with [dead-reason = 1]
  matrix:set totalNewDeathCD4 (year) tempRun count newly-dead with [dead-reason = 2]
  matrix:set totalNewDeathHIV (year) tempRun count newly-dead with [dead-reason = 3]

  matrix:set overallTransRate (year) tempRun num-new-infections-this-year / sum (count-person-years-by-sex) * 100
  
  let i 0
  while [i < num-sex]
  [
    ;# of new infections by sex (outcome)"
    matrix:set numNewInfBySex (year) (tempRun * num-sex + i) (count item i newly-infected-sex)
    ;# of new infections by sex (source)
    matrix:set numNewInfViaSex (year) (tempRun * num-sex + i) (item i count-trans-by-sex)    
    
    if num-new-infections-this-year > 0
    [
      ;% of new infections by sex"
      matrix:set percNewInfBySex (year) (tempRun * num-sex + i) (count item i newly-infected-sex / num-new-infections-this-year)
      ;% of new infections via sex
      matrix:set percNewInfViaSex (year) (tempRun * num-sex + i) (item i count-trans-by-sex / num-new-infections-this-year)
    ]   

    if item i count-trans-by-sex > 0
    [matrix:set personYearsBySex (year) (tempRun * num-sex + i) (item i count-person-years-by-sex)]
    
    if item i count-person-years-by-sex > 0
    [matrix:set transRateBySex (year) (tempRun * num-sex + i) (item i count-trans-by-sex / item i count-person-years-by-sex * 100)]
    set i i + 1
  ]

  ;# of new infections by care continuum"
  set i 0
  while [i < num-stage]
  [
    ;# of new infections by care continuum (source)
    matrix:set numNewInfViaStage (year) (tempRun * num-stage + i) (item i count-trans-by-stage)
    
    if num-new-infections-this-year > 0
    [matrix:set percNewInfViaStage (year) (tempRun * num-stage + i) (item i count-trans-by-stage / num-new-infections-this-year)]
    
    matrix:set personYearsByStage (year) (tempRun * num-stage + i) (item i count-person-years-by-stage)
    
    if item i count-person-years-by-stage > 0
    [matrix:set transRateByStage (year) (tempRun * num-stage + i) (item i count-trans-by-stage / item i count-person-years-by-stage * 100)]
    
    set i i + 1
  ]
  
  ;% of new infections by age
     
  set i 0
  while [i < num-age]
  [
    ;# of new infections by age (outcome)
    matrix:set numNewInfByAge (year) (tempRun * num-age + i) (count item i newly-infected-age)
    ;# of new infections by age (source)
    matrix:set numNewInfViaAge (year) (tempRun * num-age + i) (item i count-trans-by-age)
    
    if num-new-infections-this-year > 0
    [;% of new infections by age
      matrix:set percNewInfByAge (year) (tempRun * num-age + i) (count item i newly-infected-age / num-new-infections-this-year)   
      matrix:set percNewInfViaAge (year) (tempRun * num-age + i) (item i count-trans-by-age / num-new-infections-this-year)
    ] 
    
    if item i count-trans-by-age > 0
    [matrix:set personYearsByAge (year) (tempRun * num-age + i) (item i count-person-years-by-age)]
    
    if item i count-person-years-by-age > 0
    [matrix:set transRateByAge (year) (tempRun * num-age + i) (item i count-trans-by-age / item i count-person-years-by-age * 100)]
    
    set i i + 1
  ]
  
;  ;# of new infections by ptnr type"
;  set i 0
;  while [i < length (count-trans-by-ptnr-type)]
;  [matrix:set numNewInfByPtnrType (year) (tempRun * num-stage + i) (item i count-trans-by-ptnr-type)
;    set i i + 1
;  ]
;
;  ;# of PLWH newly diagnosed"
;  
;  let newly-diagnosed-people people with [infected? = true and stage >= 3 and CD4-diagnosis >= 4 and abs (ticks - next-test) <= 1 * time-unit]
;  let newly-diagnosed-PLWH count newly-diagnosed-people
;  let newly-diagnosed-MSM-people newly-diagnosed-people with [sex = 3]
;  let newly-diagnosed-MSM count newly-diagnosed-MSM-people
;  let newly-diagnosed-HET-people newly-diagnosed-people with [sex <= 2]
;  let newly-diagnosed-HET count newly-diagnosed-HET-people  

;  set i 0
;  while [i < num-CD4]
;  [;# of PLWH by CD4-count at diagnosis, next-test is the time unit diagnosed
;    matrix:set numNewInfByCD4 (year) (tempRun * num-CD4 + i) (count newly-diagnosed-people with [CD4-diagnosis >= item i CD4-LB and CD4-diagnosis <= item i CD4-UB])
;    ;% of PLWH by CD4-count at diagnosis
;    if newly-diagnosed-PLWH > 0
;    [matrix:set percNewInfByCD4 (year) (tempRun * num-CD4 + i) (matrix:get numNewInfByCD4 (year) (tempRun * (length CD4-LB) + i) / newly-diagnosed-PLWH)]
;    ;# of MSM by CD4-count at diagnosis
;    matrix:set numMSMByCD4 (year) (tempRun * num-CD4 + i) (count newly-diagnosed-MSM-people with [CD4-diagnosis >= item i CD4-LB and CD4-diagnosis <= item i CD4-UB])   
;    ;% of MSM by CD4-count at diagnosis
;    if newly-diagnosed-MSM > 0
;    [matrix:set percMSMByCD4 (year) (tempRun * num-CD4 + i) (matrix:get numMSMByCD4 (year) (tempRun * (length CD4-LB) + i) / newly-diagnosed-MSM)]
;    ;# of HET by CD4-count at diagnosis
;    matrix:set numHETByCD4 (year) (tempRun * num-CD4 + i) (count newly-diagnosed-HET-people with [CD4-diagnosis >= item i CD4-LB and CD4-diagnosis <= item i CD4-UB])
;    ;% of HET by CD4-count at diagnosis
;    if newly-diagnosed-HET > 0
;    [matrix:set percHETByCD4 (year) (tempRun * num-CD4 + i) (matrix:get numHETByCD4 (year) (tempRun * (length CD4-LB) + i) / newly-diagnosed-HET)]
;   
;    matrix:set acuteByCD4 (year) (tempRun * num-CD4 + i) (count total-people with [stage = 1 and CD4-count >= item i CD4-LB and CD4-count <= item i CD4-UB])
;    matrix:set nonAcuteByCD4 (year) (tempRun * num-CD4 + i) (count total-people with [stage = 2 and CD4-count >= item i CD4-LB and CD4-count <= item i CD4-UB])
;    matrix:set awareByCD4 (year) (tempRun * num-CD4 + i) (count total-people with [stage = 3 and CD4-count >= item i CD4-LB and CD4-count <= item i CD4-UB])
;    matrix:set inCareByCD4 (year) (tempRun * num-CD4 + i) (count total-people with [stage = 4 and CD4-count >= item i CD4-LB and CD4-count <= item i CD4-UB])
;    matrix:set onARTByCD4 (year) (tempRun * num-CD4 + i) (count total-people with [stage = 5 and CD4-count >= item i CD4-LB and CD4-count <= item i CD4-UB])
;    matrix:set reboundByCD4 (year) (tempRun * num-CD4 + i) (count total-people with [stage = 5 and regimen = 40 and CD4-count >= item i CD4-LB and CD4-count <= item i CD4-UB])
;    matrix:set salvageByCD4 (year) (tempRun * num-CD4 + i) (count total-people with [stage = 5 and regimen = 10 and CD4-count >= item i CD4-LB and CD4-count <= item i CD4-UB])
;    matrix:set VLSByCD4 (year) (tempRun * num-CD4 + i) (count total-people with [stage = 6 and CD4-count >= item i CD4-LB and CD4-count <= item i CD4-UB])
;    
;    set i i + 1
;  ]

;  ;PLWH stats of CD4 at diagnosis"
;  if count newly-diagnosed-people > 0
;  [matrix:set countCD4Diag (year) tempRun (count newly-diagnosed-people)
;    matrix:set meanCD4Diag (year) tempRun (mean [CD4-diagnosis] of newly-diagnosed-people)
;    matrix:set medianCD4Diag (year) tempRun (median [CD4-diagnosis] of newly-diagnosed-people)]
;
;  ;MSM stats of CD4 at diagnosis"
;  if count newly-diagnosed-MSM-people > 0
;  [matrix:set countCD4DiagMSM (year) tempRun (count newly-diagnosed-MSM-people)
;    matrix:set meanCD4DiagMSM (year) tempRun (mean [CD4-diagnosis] of newly-diagnosed-MSM-people)
;    matrix:set medianCD4DiagMSM (year) tempRun (median [CD4-diagnosis] of newly-diagnosed-MSM-people)]
;
;  ;HET stats of CD4 at diagnosis"
;  if count newly-diagnosed-HET-people > 0
;  [matrix:set countCD4DiagHET (year) tempRun (count newly-diagnosed-HET-people)
;    matrix:set meanCD4DiagHET (year) tempRun (mean [CD4-diagnosis] of newly-diagnosed-HET-people)
;    matrix:set medianCD4DiagHET (year) tempRun (median [CD4-diagnosis] of newly-diagnosed-HET-people)]
;
;  ;PLWH stats of CD4 at initial ART"
;  let CD4-people people with [infected? = true and CD4-ART > 0 and ticks - quarter-ART-start <= 1 * time-unit]
;  let CD4-MSM-people CD4-people with [sex = 3]
;  let CD4-HET-people CD4-people with [sex <= 2]
;  
;  if count CD4-people > 0
;  [matrix:set countCD4ART (year) tempRun (count CD4-people)
;    matrix:set meanCD4ART (year) tempRun (mean [CD4-ART] of CD4-people)
;    matrix:set medianCD4ART (year) tempRun (median [CD4-ART] of CD4-people)]
;
;  ;MSM stats of CD4 at initial ART"
;  if count CD4-MSM-people > 0
;  [matrix:set countCD4ARTMSM (year) tempRun (count CD4-MSM-people)
;    matrix:set meanCD4ARTMSM (year) tempRun (mean [CD4-ART] of CD4-MSM-people)
;    matrix:set medianCD4ARTMSM (year) tempRun (median [CD4-ART] of CD4-MSM-people)]
;
;  ;HET stats of CD4 at initial ART"
;  if count CD4-HET-people > 0
;  [matrix:set countCD4ARTHET (year) tempRun (count CD4-HET-people)
;    matrix:set meanCD4ARTHET (year) tempRun (mean [CD4-ART] of CD4-HET-people)
;    matrix:set medianCD4ARTHET (year) tempRUn (median [CD4-ART] of CD4-HET-people)]

end

;; Generate results related to partner information
to generate-ptnrs [year]

  matrix:set medianNumPtnrs (year) tempRun (median [sum counter-ptnr] of total-people with [(sum counter-ptnr) > 0])
  matrix:set minNumPtnrs (year) tempRun (min [sum counter-ptnr] of total-people with [(sum counter-ptnr) > 0])
  matrix:set maxNumPtnrs (year) tempRun (max [sum counter-ptnr] of total-people with [(sum counter-ptnr) > 0])
  matrix:set meanNumPtnrs (year) tempRun (mean [sum counter-ptnr] of total-people with [(sum counter-ptnr) > 0])
 
  ;# PLWH by # of all ptnrs

  let i 0
  while [i < num-ptnr-range]
  [
    matrix:set numByPtnrs (year) (tempRun * num-ptnr-range + i) (count total-people with [sum counter-ptnr >= item i ptnr-LB and sum counter-ptnr <= item i ptnr-UB])
    matrix:set numByMainPtnrs (year) (tempRun * num-ptnr-range + i) (count total-people with [(item 0 counter-ptnr + item 1 counter-ptnr) >= item i ptnr-LB and (item 0 counter-ptnr + item 1 counter-ptnr) <= item i ptnr-UB])
    matrix:set numByCasualSexualPtnrs (year) (tempRun * num-ptnr-range + i) (count total-people with [item 2 counter-ptnr >= item i ptnr-LB and item 2 counter-ptnr <= item i ptnr-UB])
    matrix:set numByCasualIDUPtnrs (year) (tempRun * num-ptnr-range + i) (count total-people with [item 3 counter-ptnr >= item i ptnr-LB and item 3 counter-ptnr <= item i ptnr-UB])
    set i i + 1
  ]

  ;"% PLWH by # of all ptnrs"
  if total-pop > 0
  [
    set i 0
    while [i < num-ptnr-range]
    [
      matrix:set percByPtnrs (year) (tempRun * num-ptnr-range + i) matrix:get numByPtnrs (year) (tempRun * num-ptnr-range + i) / total-pop
      matrix:set percByMainPtnrs (year) (tempRun * num-ptnr-range + i) matrix:get numByMainPtnrs (year) (tempRun * num-ptnr-range + i) / total-pop
      matrix:set percByCasualSexualPtnrs (year) (tempRun * num-ptnr-range + i) matrix:get numByCasualSexualPtnrs (year) (tempRun * num-ptnr-range + i) / total-pop
      matrix:set percByCasualIDUPtnrs (year) (tempRun * num-ptnr-range + i) matrix:get numByCasualIDUPtnrs (year) (tempRun * num-ptnr-range + i) / total-pop
      set i i + 1
    ]
  ]
  
end